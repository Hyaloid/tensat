(declare-sort I)

(declare-const c0 I)
(declare-const c1 I)
(declare-const c2 I)

(declare-const Imatmul I)
(declare-const Iewmul I)

(declare-fun ewadd (I I) I)
(declare-fun ewmul (I I) I)
(declare-fun smul (I I) I)
(declare-fun transpose (I) I)
(declare-fun matmul (I I) I)
(declare-fun conv2d (I I I I I I) I)
(declare-fun enlarge (I I I) I)
(declare-fun relu (I) I)
(declare-fun poolavg (I I I I I I) I)
(declare-fun poolmax (I I I I I I) I)
(declare-fun concat (I I I) I)
(declare-fun split_0 (I I) I)
(declare-fun split_1 (I I) I)
(declare-fun Cpool (I I) I)
(declare-fun Iconv (I I) I)

(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewadd x (ewadd y z))  (ewadd (ewadd x y) z))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewadd x y)  (ewadd y x))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewmul x (ewmul y z))  (ewmul (ewmul x y) z))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewmul x y)  (ewmul y x))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewmul (ewadd x y) z)  (ewadd (ewmul x z) (ewmul y z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (smul x y) w)  (smul x  (smul y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (ewadd x y) w)  (ewadd (smul x w)  (smul y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (ewmul x y) w)  (ewmul x  (smul y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (transpose (transpose x))  x)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (transpose (ewadd x y))  (ewadd (transpose x)  (transpose y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (transpose (ewmul x y))  (ewmul (transpose x)  (transpose y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (transpose x) w)  (transpose (smul x w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (matmul x (matmul y z))  (matmul (matmul x y) z))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (matmul x y) w)  (matmul x  (smul y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (matmul x (ewadd y z))  (ewadd (matmul x y) (matmul x z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (transpose (matmul x y))  (matmul (transpose y)  (transpose x)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c (smul x w) y)  (conv2d sx sy p c x (smul y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (smul (conv2d sx sy p c0 x y) w)  (conv2d sx sy p c0 (smul x w) y))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c0 x (ewadd y z))  (ewadd (conv2d sx sy p c0 x y) (conv2d sx sy p c0 x z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c0 (ewadd x y) z)  (ewadd (conv2d sx sy p c0 x z) (conv2d sx sy p c0 y z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy c0 c x y)  (conv2d sx sy c0 c x (enlarge kx ky y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c2 x y)  (relu (conv2d sx sy p c0 x y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (relu (transpose x))  (transpose (relu x)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c0 x (Cpool kx ky))  (poolavg kx ky sx sy p x))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (poolavg kx ky c1 c1 c0 (Iconv kx ky))  (Cpool kx ky))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d c1 c1 c0 c0 x (Iconv kx ky))  x)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (matmul x   Imatmul )  x)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (ewmul x Iewmul)  x)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (split_0 a (concat a x y))  x)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (split_1 a (concat a x y))  y)))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c0 (concat c1 x y) (concat c1 z w))  (concat c1 (concat c0 x z) (concat c0 y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat a (smul x w) (smul y w))  (smul (concat a x y) w))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat a (ewadd x y) (ewadd z w))  (ewadd (concat a x z) (concat a y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat a (ewmul x y) (ewmul z w))  (ewmul (concat a x z) (concat a y w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat a (relu x) (relu y))  (relu (concat a x y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c1 (transpose x) (transpose y))  (transpose (concat c0 x y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c1 (matmul x y) (matmul x z))  (matmul x (concat c1 y z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (matmul (concat c1 x z) (concat c0 y w))  (ewadd (matmul x y) (matmul z w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c0 (conv2d sx sy p c x z) (conv2d sx sy p c y z))  (conv2d sx sy p c (concat c0 x y) z))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c1 (conv2d sx sy p c x y) (conv2d sx sy p c x z))  (conv2d sx sy p c x (concat c0 y z)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (conv2d sx sy p c0 (concat c1 x z) (concat c1 y w))  (ewadd (conv2d sx sy p c0 x y) (conv2d sx sy p c0 z w)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c1 (poolavg kx ky sx sy p x) (poolavg kx ky sx sy p y))  (poolavg kx ky sx sy p (concat c1 x y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c0 (poolmax kx ky sx sy p x) (poolmax kx ky sx sy p y))  (poolmax kx ky sx sy p (concat c0 x y)))))
(assert (forall ((c I) (x I) (y I) (z I) (p I) (a I) (w I) (kx I) (ky I) (sx I) (sy I)) (= (concat c1 (poolmax kx ky sx sy p x) (poolmax kx ky sx sy p y))  (poolmax kx ky sx sy p (concat c1 x y)))))

(check-sat)
